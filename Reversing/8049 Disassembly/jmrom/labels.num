***********************************
* SYSTEM VECTORS & INITIALISATION *
***********************************

RESETSSP   EQU      $0000    reset stack pointer
RESETPC    EQU      $0004    reset program counter
XVECTOR    EQU      $0008    SYSTEM EXCEPTION VECTORS
XBRANCH    EQU      $0028
XHANDLER   EQU      $0050    INITIAL EXCEPTION HANDLER
NORAMEX    EQU      $0054    
EXIT_HAN   EQU      $005C    
IGNORE     EQU      $005E    
IVECTORS   EQU      $0060    INTERRUPT VECTORS
TVECTORS   EQU      $0080    TRAP VECTORS
MM.ALCHP   EQU      $00C0    allocate commom heap vector
MM.RECHP   EQU      $00C2    release commom heap space vector
UT.WINDW   EQU      $00C4    create window channel vector
UT.CON     EQU      $00C6    create console channel vector
UT.SCR     EQU      $00C8    create screen channel vector
UT.ERR0    EQU      $00CA    send error message to channel 0 vector
UT.ERR     EQU      $00CC    send error message to channel vector
UT.MINT    EQU      $00CE    print decimal no on channel vector
UT.MTEXT   EQU      $00D0    send message to channel vector
UT.LINK    EQU      $00D2    link item into list vector
UT.UNLNK   EQU      $00D4    unlink item from list vector
MM.ALLOC   EQU      $00D8    allocate heapspace vector
MM.LNKFR   EQU      $00DA    link free space into heap vector
IO.QSET    EQU      $00DC    set up a queue header vector
IO.QTEST   EQU      $00DE    test queue status vector
IO.QIN     EQU      $00E0    put byte into queue vector
IO.QOUT    EQU      $00E2    get byte from queue vector
IO.QEOF    EQU      $00E4    put EOF file marker in queue vector
UT.CSTR    EQU      $00E6    string comparison vector
IO.SERQ    EQU      $00E8    direct queue handling vector
IO.SERIO   EQU      $00EA    general I/O handling vector
CN.DATE    EQU      $00EC    get date string vector
CN.DAY     EQU      $00EE    get day string vector
CN.FTOD    EQU      $00F0    convert floating point to ASCII vector
CN.ITOD    EQU      $00F2    convert integer to ASCII vector
CN.ITOBB   EQU      $00F4    convert binary byte to ASCII vector
CN.ITOBW   EQU      $00F6    convert binary word to ASCII vector
CN.ITOBL   EQU      $00F8    convert binary long to ASCII vector
CN.ITOHB   EQU      $00FA    convert hex byte to ASCII vector
CN.ITOHW   EQU      $00FC    convert hex word to ASCII vector
CN.ITOHL   EQU      $00FE    convert hex long to ASCII vector
CN.DTOF    EQU      $0100    convert ASCII to floating point vector
CN.DTOI    EQU      $0102    convert ASCII to integer vector
CN.BTOIB   EQU      $0104    convert ASCII to binary byte vector
CN.BTOIW   EQU      $0106    convert ASCII to binary word vector
CN.BTOIL   EQU      $0108    convert ASCII to binary long vector 
CN.HTOIB   EQU      $010A    convert ASCII to hex byte vector 
CN.HTOIW   EQU      $010C    convert ASCII to hex word vector 
CN.HTOIL   EQU      $010E    convert ASCII to hex long vector 
BP.INIT    EQU      $0110    add superbasic procedures vector
CA.GTINT   EQU      $0112    get word integers vector
CA.GTFP    EQU      $0114    get floating points vector
CA.GTSTR   EQU      $0116    get strings vector
CA.GTLIN   EQU      $0118    get long integers vector
BV.CHRIX   EQU      $011A    reserve space on maths stack vector
RI.EXEC    EQU      $011C    do a maths operation vector
RI.EXECB   EQU      $011E    do a list of maths operations vector
BP.LET     EQU      $0120    return parameter values vector
IO.NAME    EQU      $0122    decode device name vector
MD.READ    EQU      $0124    read a microdrive sector vector
MD.WRITE   EQU      $0126    write a microdrive sector vector
MD.VERIN   EQU      $0128    verify a microdrive sector vector
MD.SECTR   EQU      $012A    read a microdrive sector header vector
SB.SNTX    EQU      $012C    basic syntax analyser
SB.FSTFC   EQU      $012E    first syntax table for commands
SB.SSTFE   EQU      $0130    second syntax table for expressions
SB.FPCBL   EQU      $0132    format pre-compiled basic line
SB.CMPER   EQU      $0134    error when compiling
SB.SPFBL   EQU      $0136    store pre-formated line
SB.CCBTA   EQU      $0138    convert pre-compiled basic to ascii
CHKRAMEX   EQU      $013A    CHECK FOR RAM EXCEPTION TABLE
BADRAM     EQU      $015A
BADRAM2    EQU      $015C    
MEMTEST    EQU      $0168    COMPREHENSIVE MAIN RAM AND EXPANSION RAM MEMORY TEST
CHKRAM1    EQU      $0170    
CHKRAM2    EQU      $0182    
TESTRAM    EQU      $0188    
NXTLONG    EQU      $019A    
ROM_END    EQU      $01A0
TESTED     EQU      $01C0    test the ram refresh
SETIO      EQU      $01CA    
SYSVAR     EQU      $01FC    
LENGTHOK   EQU      $0244    
BLOCKINF   EQU      $024E    set up the three pointers for the system tables
CLEARTAB   EQU      $0284    
ENTER_SM   EQU      $0308    enter supervisor mode
MT_TRAP1   EQU      $030C    memory management and job control
IO_TRAP2   EQU      $0312    I/O allocation
IO_TRAP3   EQU      $0318    actual I/O , file handling and graphics
SB_TRAP4   EQU      $031E    convert to absolute values
SETUPTRA   EQU      $0324    set up registers and stack for trap handlers
SYSINT     EQU      $0340    SYSTEM INTERRUPT HANDLER
EXTNLINT   EQU      $036E    EXTERNAL INTERRUPT HANDLER
EXIT_INT   EQU      $038E    
CLEANUP    EQU      $0392    CLEAN UP ROUTINE FOR ALL THE TRAP HANDLERS
CHKSBIT    EQU      $0394    CHECK IF SUPERVISOR MODE BIT SET ON ENTRY
EXITTRAP   EQU      $03A4    GENERAL EXIT TO RESTORE SUPERBASIC'S REGISTERS
CHKJBID    EQU      $03AA    CHECK JOB ID
ENDJCHK    EQU      $03C4    
CHKJOB     EQU      $03C6    
CHKJBNO    EQU      $03D2    
GETJBID    EQU      $03F6    GET CURRENT JOB'S ID & HEADER
TIMER1     EQU      $040E    TIMER FOR SERIAL & MICRODRIVE I/O
TIMER2     EQU      $0410    
TIMER3     EQU      $041A    
TIMER4     EQU      $0420    
EXITIMER   EQU      $0436    
CLRTMODE   EQU      $0440    ENTRY POINT WHEN M'DRIVE OPERATIONS FINISHED

*********************
* TRAP #1 FUNCTIONS *
*********************

CHKTRP1    EQU      $044E    HANDLE TRAP #1 FUNCTIONS
TABLE1     EQU      $0460    table of vector offsets for the TRAP #1 functions
BADPARAM   EQU      $04A8
MT_INF     EQU      $04AE    GET SYSTEM INFORMATION
MT_JINF    EQU      $04C0    GET JOB INFORMATION
POSSACTI   EQU      $04CE    
MT_CJOB    EQU      $04E8    CREATE A JOB 
NOSPACE    EQU      $04F0    
TESTENTR   EQU      $04FA    
ENTRYFRE   EQU      $050C    
JBMAXOK    EQU      $0528    
CLRHEADR   EQU      $052C    
NOSTART    EQU      $0570    
EXIT_CJB   EQU      $057A    
MT_RJOB    EQU      $0584    REMOVE A JOB
MT_FRJOB   EQU      $059C    FORCE REMOVE A JOB
MARKJOB    EQU      $05B0    
CHKJOBS    EQU      $05C2    
NOTCURNT   EQU      $05E6    
NOTWAIT    EQU      $060A    
CHKBLOCK   EQU      $060E    
NOLOC      EQU      $0622    
NOTOWNED   EQU      $0634    
CHKCURNT   EQU      $0650    
EXIT_REM   EQU      $065A    
FINDSUBS   EQU      $0660    FIND SUBSIDUARY IN JOB TREE
CHKENTRY   EQU      $0664    
CHKPARNT   EQU      $067A    
GETHEAD    EQU      $0688    
NOSUBSID   EQU      $0696    
EXIT_FIN   EQU      $069A    
MT_TRAPV   EQU      $06A4    SET UP RAM EXCEPTION TABLE
MT_ALLOC   EQU      $06B8    ALLOCATE HEAP SPACE
MT_LNKFR   EQU      $06C6    RELEASE HEAP SPACE
MT_ALCHP   EQU      $06D4    ALLOCATE COMMON HEAP SPACE
RELEASE    EQU      $06E8
MT_RECHP   EQU      $06F8    RELEASE COMMON HEAP SPACE
EXIT_REC   EQU      $0700    
MT_ALRES   EQU      $0704    ALLOCATE RESPR SPACE
MT_RERES   EQU      $0720    RELEASE RESIDENT PROCEDURE AREA
SETPOINT   EQU      $072C    
NOTEMPTY   EQU      $073A    
EXIT_RER   EQU      $073C    
MT_ALBAS   EQU      $073E    ALLOCATE BASIC AREA
MT_REBAS   EQU      $0744    RELEASE BASIC AREA
EXIT_REB   EQU      $0758    
MT_DMODE   EQU      $075C    SET OR READ DISPLAY MODE
CLSCREEN   EQU      $0780    clear the screen to all black
REQ_M4     EQU      $07E8    
READ_DM    EQU      $07F8    
WRITE_TY   EQU      $0804    
MT_IPCOM   EQU      $080C    SEND IPC COMMAND
MT_BAUD    EQU      $081C    SET SERIAL PORT BAUD RATE
EXIT_BAU   EQU      $0830    
BAUDOK     EQU      $0838    
BAUDTABL   EQU      $0870    table of valid baud rates
MT_LINK    EQU      $0880    LINK ITEM INTO LIST
MT_UNLNK   EQU      $088C    UNLINK ITEM FROM LIST
EXIT_UNL   EQU      $0896

*****************
* THE SCHEDULER *
*****************
         
FRAMEINT   EQU      $089A    FRAME INTERRUPT HANDLER
POLLM_OK   EQU      $08A4
SCHEDULE   EQU      $08D0    
CHKPOLLM   EQU      $08D4    
MT_SUSJB   EQU      $08EA    SUSPEND A JOB
MT_RELJB   EQU      $090C    RELEASE A SUSPENDED JOB
EXIT_REL   EQU      $0924    
MT_PRIOR   EQU      $092A    CHANGE JOB PRIORITY
MT_ACTIV   EQU      $093A    ACTIVATE A JOB
EXIT_ACT   EQU      $0964    
STILLACT   EQU      $096A    
SHUTDOWN   EQU      $096E    COPY JOB'S DETAILS TO HEADER'S STORAGE AREA
DECIDE     EQU      $09A6    FIND OUT WHICH JOB IS TO BE THE NEXT ONE
STARTUP    EQU      $0A12    COPY JOB'S DETAILS FROM HEADER'S STORAGE AREA
EXECLIST   EQU      $0A38    EXECUTE LINKED LIST OF TASKS
NEXTTASK   EQU      $0A3A    
LIST_END   EQU      $0A56

************************
* SERIAL DEVICE DRIVER *
************************

SER_LB     EQU      $0A5A    LINKAGE BLOCK FOR SERIAL DEVICE
SEROPEN    EQU      $0A6A    OPEN A SERIAL CHANNEL
SERDATA    EQU      $0A78    data for serial device name
IPC_OPEN   EQU      $0A94    command table for IPC
IPC_CLOS   EQU      $0AA4    
SE_ERRNF   EQU      $0AB4    
SE_ERRIU   EQU      $0AB8    
SER_EXIT   EQU      $0ABA    
SERNMOK    EQU      $0AC2    
SER_OUTQ   EQU      $0AF0    create the 228 byte buffer for the serial queue
SER_INQ    EQU      $0B04    
SERCLOSE   EQU      $0B28    CLOSE A SERIAL CHANNEL
SERPORT1   EQU      $0B36    
SER_IPC    EQU      $0B44    SEND IPC COMMAND TO OPEN OR CLOSE SERIAL PORT
SER_IO     EQU      $0B50    GENERAL SERIAL I/O
SE_PEND    EQU      $0B62    TEST FOR PENDING INPUT
SE_SBYTE   EQU      $0B6A    SEND A BYTE
CHAR_OK1   EQU      $0B78    
PTABLE1    EQU      $0B84
SPA_MARK   EQU      $0B8A    
SPA_NONE   EQU      $0B8E    
SPA_SPAC   EQU      $0B98    
SPA_ODD    EQU      $0B9E    
SPA_EVEN   EQU      $0BA6    
SE_FBYTE   EQU      $0BAA    FETCH A BYTE
PTABLE2    EQU      $0BC0
LPA_MARK   EQU      $0BC6    
LPA_ODD    EQU      $0BCC    
LPA_EVEN   EQU      $0BD0    
LPA_SPAC   EQU      $0BD2    
LPA_NONE   EQU      $0BDA    
CHAR_OK2   EQU      $0BE8    
CHKPARIT   EQU      $0BEA    ckeck parity of byte
NEXTPBIT   EQU      $0BEE

**********************
* PIPE DEVICE DRIVER *
**********************
         
PIPE_LB    EQU      $0BFC    LINKAGE BLOCK FOR PIPE DEVICE
PIPEOPEN   EQU      $0C0C    OPEN A PIPE CHANNEL
PIPEDATA   EQU      $0C1A    data for pipe device name
PIPENMOK   EQU      $0C26    
PP_INPUT   EQU      $0C46    
PIPE_OK    EQU      $0C72    
PP_EXIT    EQU      $0C74    
PP_ERRBP   EQU      $0C78    
PIPECLOS   EQU      $0C7E    CLOSE A PIPE CHANNEL
INPIPE     EQU      $0C90    
PIPERECL   EQU      $0CA6

**********************************
* CONSOLE & SCREEN DEVICE DRIVER *
**********************************

CON_LB     EQU      $0CAA    LINKAGE BLOCK FOR CONSOLE DEVICE
CONOPEN    EQU      $0CBA    OPEN A CONSOLE CHANNEL
CONDATA    EQU      $0CCA
CONNMOK    EQU      $0CE6    
SCR_NEWQ   EQU      $0D0C    
TRY_SCR    EQU      $0D12
SCRDATA    EQU      $0D1C
SCRNMOK    EQU      $0D34    OPEN A SCREEN CHANNEL
SCR_OK     EQU      $0D3A    
SCR_EXIT   EQU      $0D3C    
SCROPEN    EQU      $0D42    OPEN A SCREEN OR CONSOLE CHANNEL
SCR_M4     EQU      $0D8A    
SCR_END    EQU      $0DA2    
CONCLOSE   EQU      $0DA4    CLOSE A CONSOLE OR SCREEN CHANNEL 
NEXT_Q1    EQU      $0DB6    
FIND_Q1    EQU      $0DC0    
NEXT_Q2    EQU      $0DC2    
CONRECLM   EQU      $0DCA
CON_IO     EQU      $0DD0    GENERAL CONSOLE OR SCREEN CHANNEL I/O
SCRACTIV   EQU      $0DDA    
SC_OPOK    EQU      $0E0A    
SC_TBL     EQU      $0E12
SC_PEND    EQU      $0E1A    TEST FOR PENDING INPUT
SC_FBYTE   EQU      $0E1E    FETCH A BYTE
SC_FSTRG   EQU      $0E24    FETCH A STRING OF BYTES
SC_GET     EQU      $0E26    
SC_SSTRG   EQU      $0E38    SEND A STRING OF BYTES
SC_ERRBP   EQU      $0E46    
BUF_END    EQU      $0E48    
W_CMND     EQU      $0E56    
SC_SBYTE   EQU      $0E5A    SEND A BYTE
NO_NEWL    EQU      $0E6E    
CHK_LF     EQU      $0E90    
SC_ECHO    EQU      $0EA0    
SC_FLINE   EQU      $0EAE    FETCH A LINE
SC_EDLIN   EQU      $0EB4    EDIT A LINE
BUF_UP     EQU      $0F12    
INSERT     EQU      $0F18    
FILTER     EQU      $0F34    
BUF_DOWN   EQU      $0FE8    
DELETE     EQU      $0FEC

*************************
* NETWORK DEVICE DRIVER *
*************************

NET_LB     EQU      $105E    LINKAGE BLOCK FOR NETWORK DEVICE
NETOPEN    EQU      $106E    OPEN A NETWORK CHANNEL
NETDATA    EQU      $107C
NETNMOK    EQU      $108C    
NET_EXIT   EQU      $10AE    
NETCLOSE   EQU      $10B2    CLOSE A NETWORK CHANNEL
NT_RECLM   EQU      $10D8    
NT_ERRBP   EQU      $10DC    
NET_IO     EQU      $10E0    GENERAL NETWORK I/O
NT_PEND    EQU      $10F2    TEST FOR PENDING INPUT
NT_FBYTE   EQU      $111E    FETCH A BYTE
NT_SBYTE   EQU      $112A    SEND A BYTE

****************************
* MICRODRIVE DEVICE DRIVER *
****************************

SCHDTASK   EQU      $115C    START OF SCHEDULER TASKS LINKED LIST
FLASHCUR   EQU      $1164    FLASH THE CURSOR
EXIT_FLA   EQU      $1188    
MDV_LB     EQU      $118A    LINKAGE BLOCK FOR MICRODRIVE DEVICE
REPEATIO   EQU      $11B4    DO MICRODRIVE I/O OPERATION UNTIL COMPLETE
NEXT_IO    EQU      $11B8
MDV_IO     EQU      $11CE    GENERAL MICRODRIVE I/O
MD_TBL     EQU      $11F6
MD_ERRBP   EQU      $1200
FS_CHECK   EQU      $1204    CHECK PENDING OPERATIONS
FS_FLUSH   EQU      $120A    FLUSH ALL BUFFERS
FS_CHK     EQU      $120E
FS_POSAB   EQU      $1244    POSITION ABSOLUTE FILE POINTER
FS_POSRE   EQU      $124A    POSITION RELATIVE FILE POINTER
FS_MDINF   EQU      $1256    GET MEDIUM INFORMATION
MD_INUSE   EQU      $1274
MD_BAD     EQU      $1276
FS_LOAD    EQU      $1280    LOAD A FILE
FS_SAVE    EQU      $1294    SAVE A FILE
FS_HEADS   EQU      $12A6    SET FILE HEADER
MD_GETBL   EQU      $12AA
FS_HEADR   EQU      $12B8    READ FILE HEADER
GET_HEAD   EQU      $12BC
MD_SSTRG   EQU      $12FA
MD_SBYTE   EQU      $1308
MD_ERRRO   EQU      $1318
MD_ERRFE   EQU      $1322
MD_ERREF   EQU      $133A
MD_ERRNC   EQU      $147A
MD_OPEN    EQU      $168A    OPEN A MICRODRIVE CHANNEL
MD_END     EQU      $179A
MD_ERRNF   EQU      $179E
MD_ERREX   EQU      $17A2
MD_CLOSE   EQU      $1812    CLOSE A MICRODRIVE CHANNEL
FILE_ABS   EQU      $1880    POSITION FILE POINTER USING ABSOLUTE OFFSET
FILE_REL   EQU      $1886    POSITION FILE POINTER USING RELATIVE OFFSET

************************
* SCREEN DEVICE DRIVER *
************************

MT_CLOCK   EQU      $18B4    DO CLOCK FUNCTION
GETTIME    EQU      $18BA    
MT_ACLK    EQU      $18CC    ADJUST CLOCK
MT_SCLK    EQU      $18CE    SET CLOCK
CLKMASK    EQU      $18D4    
SETCLK     EQU      $18DC    
NEWCLK     EQU      $18DE    
CLK_EXIT   EQU      $18E8    
WIN_CMND   EQU      $18EC    CHECK FOR WINDOW TRAP #3 COMMANDS
SD_BADP1   EQU      $1946
SD_ERRBP   EQU      $1948
SD_TBL2    EQU      $194C
SD_CHAR    EQU      $19A6    PRINT A CHARACTER
SD_PXENQ   EQU      $19D2    READ WINDOW SIZE/CURSOR POSITION (PIXEL)
SD_CHENQ   EQU      $19E4    READ WINDOW SIZE/CURSOR POSITION (CHARACTER)
PIXL_DIV   EQU      $1A04
SD_WDEF    EQU      $1A10    REDEFINE WINDOW
SD_BORDR   EQU      $1A52    SET WINDOW WIDTH & COLOUR
SD_BORDE   EQU      $1A56    SET BORDER WIDTH ONLY
NO_CHNGE   EQU      $1A64
SD_REDEF   EQU      $1A6C    REDEFINE WINDOW WITH NEW SIZE
SD_OUTR1   EQU      $1ABE
CHK_BORD   EQU      $1AC6    FORM OVERALL WINDOW SIZE FROM PARAMETERS
CHK_SIZE   EQU      $1AC8    FORM NEW WINDOW SIZE INSIDE BORDER
TOO_BIG    EQU      $1ADC    
SD_CURE    EQU      $1AE0    ENABLE CURSOR
SD_CURS    EQU      $1AEE    DISABLE CURSOR
PRNT_CUR   EQU      $1AFC    PRINT THE CURSOR IF ENABLED
DISP_CUR   EQU      $1B04    REPRINT THE CURSOR
CHK_CURS   EQU      $1B28    CHECK CURSOR CO-ORDINATES
SD_OUTR2   EQU      $1B48    
SD_DONL    EQU      $1B4C    DO PENDING NEWLINE
SD_NEWL    EQU      $1B52    DO FORCED NEWLINE
EXIT_NL    EQU      $1B6C
END_NL     EQU      $1B74
SD_HOME    EQU      $1B76    RESET CURSOR POSITION TO 0,0
SD_POS     EQU      $1B7C    SET CURSOR POSITION
SD_TAB     EQU      $1B82    SET HORIZONTAL POSITION
SD_COL     EQU      $1B86
SD_NL      EQU      $1B8C    DO NEWLINE
SD_PCOL    EQU      $1B98    SET TO PREVIOUS COLUMN
SD_NCOL    EQU      $1BA2    SET TO NEXT COLUMN
SD_PROW    EQU      $1BB0    SET TO PREVIOUS ROW
SD_NROW    EQU      $1BBA    SET TO NEXT ROW
SD_PIXP    EQU      $1BC6    SET PIXEL POSITION
CANCEL     EQU      $1BF4
SD_OUTR3   EQU      $1BFC    
SD_RECOL   EQU      $1C00    RECOLOUR A WINDOW
SD_CLEAR   EQU      $1C08    CLEAR WHOLE WINDOW
SD_CLR     EQU      $1C0E    CLEAR A WINDOW
SD_SCRLL   EQU      $1C18    SCROLL A WINDOW
SD_PANW    EQU      $1C22    PAN A WINDOW
SD_SETUP   EQU      $1C36
SD_DO_OP   EQU      $1C3A
SD_REST    EQU      $1C54
SD_CLINE   EQU      $1C6C
SD_WHOLE   EQU      $1C7C
SD_FILL    EQU      $1C86    FILL A BLOCK
SD_OUTR4   EQU      $1CE2    
SD_FOUNT   EQU      $1CE6    SET CHARACTER FONTS
SD_SETCL   EQU      $1D04    SET COLOURS
SD_SETFL   EQU      $1D18    SET FLASH MODE
SD_SETMD   EQU      $1D24    SET WRITE MODE
SD_SETUL   EQU      $1D2A    SET UNDERLINE MODE
TEST_BIT   EQU      $1D2C
SD_SETSZ   EQU      $1D32    SET CHARACTER SIZE
GET_SIZE   EQU      $1D4C
SD_XOK1    EQU      $1D72
SET_ATTR   EQU      $1D96    
SD_YOK1    EQU      $1DA2
CTABLE_1   EQU      $1DA6
CTABLE_2   EQU      $1DAA    
SD_GCUR    EQU      $1DAC    SET TEXT CURSOR WITH GRAPHIC CO-ORDINATES
SD_FTOIW   EQU      $1DE2
MLIST_1    EQU      $1DE8
SD_SCALE   EQU      $1DFC    SET GRAPHICS SCALE & ORIGIN
SD_FLOOD   EQU      $1E0A    SET FILL MODE/USER VECTORS
SD_POINT   EQU      $1E62    PLOT POINT
SD_LINE    EQU      $1E70    DRAW LINE
MTABLE_1   EQU      $1E7E
MLIST_3    EQU      $1E88
MLIST_0    EQU      $1E9D
SD_ARC     EQU      $1E9E    PLOT ARC
MTABLE_2   EQU      $1EC4
MLIST_4    EQU      $1ED6
MLIST_5    EQU      $1F28
SD_ELIPS   EQU      $1F46    DRAW CIRCLE/ELLIPSE
MTABLE_3   EQU      $1F54
MLIST_6    EQU      $1F66
MLIST_7    EQU      $1F8C
MLIST_8    EQU      $1F92
MLIST_9    EQU      $2046
MLIST_A    EQU      $204A
DO_TABLE   EQU      $2058    DO TABLE OF MATHS OFFSETS
MLIST_B    EQU      $2142
MLIST_C    EQU      $2170
UT_FILL0   EQU      $24A0
UT_FILL1   EQU      $2516
UT_FILL2   EQU      $2522
UT_FILL3   EQU      $252E
UT_SCRLL   EQU      $2556    SCROLL A WINDOW
UT_PAN     EQU      $25A0    PAN A WINDOW
COLRMASK   EQU      $2730    REDO COLOUR MASKS
PRINT_CH   EQU      $2798    PRINT A CHARACTER

****************************************
* MICRODRIVE DEVICE DRIVER (CONTINUED) *
****************************************

MD_SLAVE   EQU      $2916    MICRODRIVE FORCED SLAVING
CLR_SBLK   EQU      $2954    CLEAR THE SLAVE BLOCKS USED BY A DRIVE
BAD_HEAD   EQU      $29B2
BAD_MEDI   EQU      $29B6    CHECK IF MEDIUM BAD OR UNFORMATTED
MED_OK     EQU      $29CC
GAPINT     EQU      $29D6    GAP INTERRUPT HANDLER
MD_EXIT1   EQU      $2A9C
MD_EXIT2   EQU      $2A9E
MD_EXIT3   EQU      $2AA2
MD_EXIT4   EQU      $2AA6
MD_DESEL   EQU      $2B6A    SWITCH ALL MICRODRIVE MOTORS OFF
MD_SELCT   EQU      $2B70    SWITCH A MICRODRIVE MOTOR ON

*****************************
* PERIPHERAL COMMUNICATIONS *
*****************************

IPC_CMND   EQU      $2B8C    DO IPC COMMAND
IPC_PUT    EQU      $2B9E
IPC_END    EQU      $2BBE
IPC_GETP   EQU      $2BD2
ACK_INTR   EQU      $2BD6    ACKNOWLEDGE INTERFACE INTERRUPTS
IPC_PARA   EQU      $2BE2
INTRFINT   EQU      $2BE6    INTERFACE INTERRUPT HANDLER
TRNSMINT   EQU      $2BF2    TRANSMIT INTERRUPT HANDLER
POLLTASK   EQU      $2C12    START OF POLLED TASKS LINKED LIST
SECTASK    EQU      $2C1A    SECOND TASK IN SCHEDULER LINKED LIST
CHK_IPC    EQU      $2C3A
CHK_SER1   EQU      $2C64
CHK_SER2   EQU      $2C78
EXIT_CHK   EQU      $2C8C
SER_TXRX   EQU      $2C8E
CHK_KEY    EQU      $2D72
BRK_KEY    EQU      $2DD8
CHK_ALT    EQU      $2E26
NO_ALT     EQU      $2E4A
CTRL_F5    EQU      $2E4E
CTRL_C     EQU      $2E54
IPC_SET    EQU      $2E80    SET UP IPC COMMAND
IPC_SEND   EQU      $2E8E    SEND COMMAND TO IPC
IPC_RETN   EQU      $2EA8    RETURN IPC PARAMETER NIBBLE
IPC_RETB   EQU      $2EAC    RETURN IPC PARAMETER BYTE

*******************************
* MEMORY ALLOCATION & CONTROL *
*******************************

MM_ALCHP   EQU      $2EC0    ALLOCATE COMMON HEAP
MM_ALTPA   EQU      $2F0C    EXPAND TRANSIENT PROGRAM AREA
MM_RECHP   EQU      $2F70    RELEASE COMMON HEAP SPACE
MM_RETPA   EQU      $2F9E    RELEASE TRANSIENT PROGRAM AREA
MT_FREE    EQU      $2FF2    FIND MAXIMUM AMOUNT OF FREE SPACE
MM_ALLOC   EQU      $3016    ALLOCATE HEAP SPACE
MM_SRCH    EQU      $3046
MM_LNKFR   EQU      $3074    LINK FREE SPACE INTO HEAP
MM_ALBAS   EQU      $30CA    ALLOCATE BASIC AREA
MM_REBAS   EQU      $30DA    RELEASE BASIC AREA

**********************************
* INPUT OUTPUT SUB SYSTEM (IOSS) *
**********************************

CHKTRP2    EQU      $31B4    HANDLE TRAP #2 FUNCTIONS
ABS_ADDR   EQU      $31C6
IO_OPEN    EQU      $31E2    OPEN A CHANNEL
SCAN_CT    EQU      $31F2
SCAN_DD    EQU      $3202
NEXT_DD    EQU      $3206
SET_CHAN   EQU      $3230
END_OPEN   EQU      $325E
IO_CLOSE   EQU      $3264    CLOSE A CHANNEL
END_CLOS   EQU      $328A
CHKTRP3    EQU      $328E    HANDLE TRAP #3 FUNCTIONS
IOSTRING   EQU      $32C0    
BYTE_IO    EQU      $32C2    
A1_ABS     EQU      $32D6    
CHKTRP4    EQU      $3344    CONVERT TO ABSOLUTE VALUES
CHKCHID    EQU      $3356    CHECK CHANNEL ID
DOWAITIO   EQU      $338A    DO WAITING I/O
IO_DELET   EQU      $345C    DELETE A FILE
IO_OPEN2   EQU      $3464
TYPE_OK    EQU      $346E
IO_FORMT   EQU      $35C0    FORMAT A MEDIUM
CHK_DD     EQU      $35DE
NXT_DD     EQU      $35E6
CHK_NAME   EQU      $35F0
BAD_DEV    EQU      $3600
DD_OK      EQU      $3608
IO_ERRNF   EQU      $3622
EXIT_DD    EQU      $3624

******************************
* GENERAL SERIAL I/O DRIVERS *
******************************

IO_NAME    EQU      $3636    DECODE DEVICE NAME
IO_SERQ    EQU      $36D6    DIRECT QUEUE HANDLING
IO_QSET    EQU      $36FE    SET UP A QUEUE HEADER
IO_QTEST   EQU      $3714    TEST QUEUE STATUS
IO_QIN     EQU      $3742    PUT BYTE INTO QUEUE
IO_QOUT    EQU      $3768    GET BYTE FROM QUEUE
IO_QEOF    EQU      $3792    PUT EOF MARKER IN QUEUE
IO_SERIO   EQU      $3796    GENERAL I/O HANDLING
IO_TABLE1  EQU      $37CA
IO_TABLE2  EQU      $37D2
IO_FLINE   EQU      $37D6
IO_LNXTB   EQU      $37DA
IO_SSTRG   EQU      $37EE
IO_SNXTB   EQU      $37F2
IO_LOAD    EQU      $3802
IO_FNXTB   EQU      $3806
IO_FSTRG   EQU      $3808
IO_PEND    EQU      $3814
IO_FBYTE   EQU      $3816
IO_SBYTE   EQU      $3818
IO_EDLIN   EQU      $381E
IO_ERRBO   EQU      $3822
IO_ERROK   EQU      $3826
IO_GEXIT   EQU      $3828
IO_CALLF   EQU      $382C
IO_EEXIT   EQU      $3836
IO_HEADS   EQU      $383A
IO_HEADR   EQU      $384E

********************
* SYSTEM UTILITIES *
********************

UT_ERR0    EQU      $3868    SEND ERROR MESSAGE TO CHANNEL 0
UT_ERR     EQU      $3872    SEND ERROR MESSAGE TO CHANNEL
PRNT_ERR   EQU      $388A
ERR_EXIT   EQU      $3892
ERR_OFST   EQU      $3894
ERR_MSGE   EQU      $38BE
UT_MINT    EQU      $3A00    PRINT DECIMAL NUMBER ON CHANNEL
UT_MTEXT   EQU      $3A22    SEND MESSAGE TO CHANNEL
UT_LINK    EQU      $3A4A    LINK ITEM INTO LIST
UT_UNLNK   EQU      $3A50    UNLINK ITEM FROM LIST
UT_WINDW   EQU      $3A60    CREATE WINDOW CHANNEL
UT_CON     EQU      $3A64    CREATE CONSOLE CHANNEL
UT_SCR     EQU      $3A6A    CREATE SCREEN CHANNEL
UT_CSTR    EQU      $3B0A    STRING COMPARISON

***************
* CONVERSIONS *
***************

CN_DTOF    EQU      $3D84    CONVERT ASCII TO FLOATING POINT
CN_DTOI    EQU      $3E30    CONVERT ASCII TO INTEGER
CN_HTOIB   EQU      $3E42    CONVERT ASCII TO HEX BYTE
CN_HTOIW   EQU      $3E46    CONVERT ASCII TO HEX WORD
CN_HTOIL   EQU      $3E4A    CONVERT ASCII TO HEX LONG
CN_BTOIB   EQU      $3EA4    CONVERT ASCII TO BINARY BYTE
CN_BTOIW   EQU      $3EA8    CONVERT ASCII TO BINARY WORD
CN_BTOIL   EQU      $3EAC    CONVERT ASCII TO BINARY LONG
CN_ITOD    EQU      $3EC4    CONVERT INTEGER TO ASCII
CN_ITOHL   EQU      $3F18    CONVERT HEX LONG TO ASCII
CN_ITOHW   EQU      $3F1C    CONVERT HEX WORD TO ASCII
CN_ITOHB   EQU      $3F20    CONVERT HEX BYTE TO ASCII
CN_ITOBL   EQU      $3F44    CONVERT BINARY LONG TO ASCII 
CN_ITOBW   EQU      $3F48    CONVERT BINARY WORD TO ASCII
CN_ITOBB   EQU      $3F4C    CONVERT BINARY BYTE TO ASCII
CN_FTOD    EQU      $3F66    CONVERT FLOATING POINT TO ASCII
CN_DATE    EQU      $40CE    GET DATE STRING
CN_DAY     EQU      $4122    GET DAY STRING
           EQU      $414E    DAYS OF THE WEEK & MONTHS OF THE YEAR

***********************************
* THE FLOATNG POINT MATHS PACKAGE *
***********************************

RI_SINGL   EQU      $4228    DO SINGLE MATHS OPERATION PRESERVING A6
RI_LIST    EQU      $4230    DO LIST OF MATHS OPERATIONS PRESERVING A6 
RI_EXEC    EQU      $423E    DO A MATHS OPERATION
RI_EXECB   EQU      $4246    DO A LIST OF MATHS OPERATIONS
RI_GET     EQU      $424C
RI_TEST    EQU      $4252
RI_LOAD    EQU      $425E
RI_STORE   EQU      $4270
RI_RESET   EQU      $4278
RI_MOVE    EQU      $427C
RI_EXIT    EQU      $428A
RI_JUMP    EQU      $4290
MATHTBL    EQU      $4298    TABLE OF OFFSETS FOR THE MATHS OPERATIONS
RI_SIN     EQU      $42C8
RI_COS     EQU      $42D0
RI_TRIG    EQU      $42DA
RI_TAN     EQU      $42F4
RI_COT     EQU      $42FC
RI_ACOS    EQU      $437C
RI_ASIN    EQU      $438A
RI_ACOT    EQU      $43B6
RI_ATAN    EQU      $43BE
RI_POWFP   EQU      $447A
RI_LOG10   EQU      $44C4
RI_LN      EQU      $44DE
ERR_OV_1   EQU      $4570
RI_EXP     EQU      $4576
RI_SQRT    EQU      $45C2
ERR_OV_2   EQU      $4784
RI_TRUNC   EQU      $47FA
RI_NORND   EQU      $480C
RI_NINT    EQU      $4830
RI_INT     EQU      $4834
RI_NLINT   EQU      $4840
ERR_OV_3   EQU      $484E
RI_LINT    EQU      $4852
RI_SUB     EQU      $48C4
RI_ADD     EQU      $48D2
RI_MULT    EQU      $4966
ERR_OV_4   EQU      $49FA
RI_DIV     EQU      $49FE
ERR_OV_5   EQU      $4A86
RI_ABS     EQU      $4A8A
RI_NEG     EQU      $4A90
RI_DUP     EQU      $4ACE

*****************************
* SUPERBASIC INITIALISATION *
*****************************

CHKPROMS   EQU      $4AF8    CHECK FOR PERIPHERAL ROMS
CONM4_0    EQU      $4BFA
CONM4_1    EQU      $4C06
CONM4_2    EQU      $4C12
CONM8_0    EQU      $4C1E
CONM8_1    EQU      $4C2A
CONM8_2    EQU      $4C36
CON_I0     EQU      $4C42
CON_I1     EQU      $4C4E
CON_I2     EQU      $4C5A
COPYRIGHT  EQU      $4C66
F1F2_MESS  EQU      $4C86
CA_RERIS   EQU      $4F46    RESERVE SPACE ON MATHS STACK 2
BV_CHRIX   EQU      $4F48    RESERVE SPACE ON MATHS STACK
CA_ALBTP   EQU      $4F4C    ALLOCATE SPACE ON BACKTRACK STACK
CA_ALTGP   EQU      $4F52    ALLOCATE SPACE ON TEMPORARY GRAPH STACK
CA_ALNTP   EQU      $4F58    ALLOCATE SPACE IN NAME TABLE
CA_ALRTP   EQU      $4F5E    ALLOCATE SPACE IN RETURN STACK
CA_ALBFP   EQU      $4F64    ALLOCATE SPACE IN BUFFER
CA_ALTKP   EQU      $4F68    ALLOCATE SPACE IN TOKEN TABLE
CA_ALNLP   EQU      $4F6C    ALLOCATE SPACE IN NAME LIST
CA_ALVVP   EQU      $4F70    ALLOCATE SPACE IN VARIABLE VALUES
CA_ALCHB   EQU      $4F74    ALLOCATE SPACE ON SUPERBASIC CHANNEL TABLE
CA_ALLNP   EQU      $4F78    ALLOCATE SPACE IN LINE NUMBER TABLE
CA_ALFFP   EQU      $4F7C    ALLOCATE SPACE IN PROGRAM FILE
CA_ALSBT   EQU      $4F7E    ALLOCATE SPACE IN SUPERBASIC TABLE
CA_ALSBS   EQU      $4F8A    ALLOCATE SPACE ON SUPERBASIC STACK
CA_REPFP   EQU      $5084    RECLAIM SPACE ABOVE PROGRAM FILE
CA_RENLP   EQU      $5088    RECLAIM SPACE ABOVE NAME LIST
CA_RENTP   EQU      $508C    RECLAIM SPACE ABOVE NAME TABLE
CA_REVVP   EQU      $5090    RECLAIM SPACE ABOVE VARIABLE VALUES
CA_RECHP   EQU      $5094    RECLAIM SPACE ABOVE CHANNEL TABLE
CA_RERTP   EQU      $5098    RECLAIM SPACE ABOVE RETURN STACK
CA_RESBT   EQU      $509A    RECLAIM SPACE ABOVE SUPERBASIC TABLE
CA_GTSTR   EQU      $5C40    GET STRINGS
CA_GTINT   EQU      $5C44    GET WORD INTEGERS
CA_GTFP    EQU      $5C48    GET FLOATING POINTS
CA_GTLIN   EQU      $5C4C    GET LONG INTEGERS       

*************************
* SUPERBASIC PROCEDURES *
*************************

BP_BAUD    EQU      $5F3C    SET BAUD RATE FOR SERIAL CHANNELS
BAUD_EXI   EQU      $5F50
BAUD_ERR   EQU      $5F52
BEEPTBL    EQU      $5F56
BEEP_EXI   EQU      $5F66
BEEP_END   EQU      $5F6C
BP_BEEP    EQU      $5F78    SWITCH SOUND ON OR OFF
SOUNDON    EQU      $5FE2
SOUNDOFF   EQU      $6002
BEEP_INS   EQU      $601A
BP_CALL    EQU      $6024    CALL MACHINE CODE ROUTINE
GETCHID    EQU      $6078    GET SUPER BASIC CHANNEL INFO FROM ID 
BP_CSIZE   EQU      $60FC    SET A NEW CHARACTER SIZE
BP_CURSO   EQU      $6120    POSITION CURSOR WITH GRAPHIC CO-ORDS
BP_AT      EQU      $612E    POSITION CURSOR @ CHARACTER CO-ORDS
BP_ADATE   EQU      $61E2    ADJUST SYSTEM CLOCK
BP_SDATE   EQU      $61F6    RESET SYSTEM CLOCK
EXIT_CLK   EQU      $6266
CLK_END    EQU      $6268
MONTHTBL   EQU      $626C
BP_READ    EQU      $62B8    ASSIGN DATA TO LIST OF VARIABLES
BP_EXEC    EQU      $62E6    LOAD MACHINE CODE PROGRAM & RETURN
BP_EXECW   EQU      $62EA    LOAD MACHINE CODE PROGRAM & WAIT
BP_RJOB    EQU      $634C
BP_LBYTE   EQU      $6358    LOAD DATA FILE INTO MEMORY
BP_SEXEC   EQU      $638E    SAVE EXECUTABLE PROGRAM
BP_SBYTE   EQU      $6392    SAVE AREA OF MEMORY TO DEVICE
DO_CLOSE   EQU      $63D4
BP_END     EQU      $63DA
BP_EXIT    EQU      $63DC
DOTRAP3    EQU      $63E8    
DO_TRAP3   EQU      $63EA
DOIOOPEN   EQU      $6408
DOTRAP2    EQU      $6410    
BP_DLETE   EQU      $642A    REMOVE A FILE FROM DEVICE DIRECTORY
BP_DIR     EQU      $6430    DISPLAY DEVICE DIRECTORY
BP_FORMT   EQU      $64BA    FORMAT DEVICE MEDIUM
BP_COPY    EQU      $64D4    COPY FILE
BP_COPYN   EQU      $64D8    COPY FILE MINUS HEADER
BP_CLOSE   EQU      $656C    CLOSE A CHANNEL
BP_OPEN    EQU      $658E    LINK CHANNEL WITH PHYSICAL DEVICE
BP_OPENI   EQU      $6592    OPEN EXISTING MICRODRIVE FILE FOR I/P
BP_OPENN   EQU      $6596    OPEN NEW MICRODRIVE FILE FOR O/P
BP_SAVE    EQU      $65B4    SAVE SUPERBASIC PROGRAM ON DEVICE
BP_FILL    EQU      $65CE    TURN GRAPHICS FILL ON OR OFF
BP_UNDER   EQU      $65EC    TURN UNDERLINE STATE ON OR OFF
BP_FLASH   EQU      $65F2    TURN FLASH STATE ON OR OFF
BP_OVER    EQU      $6608    SELECT OVER PRINTING TYPE
BP_SCALE   EQU      $663C    ALTER GRAPHICS SCALE FACTOR & ORIGIN
BP_POINT   EQU      $664E    DRAW POINT RELATIVE TO GRAPHICS ORIGIN
BP_RPOIN   EQU      $6652    DRAW POINT RELATIVE TO GRAPHICS CURSOR
BP_LINE    EQU      $6660    DRAW LINE RELATIVE TO GRAPHICS ORIGIN
BP_LINER   EQU      $6664    DRAW LINE RELATIVE TO GRAPHICS CURSOR
BP_ELLIP   EQU      $6678    DRAW ELLIPSE RELATIVE TO GRAPHICS ORIGIN
BP_ELPSR   EQU      $667C    DRAW ELLIPSE RELATIVE TO GRAPHICS CURSOR
BP_ARC     EQU      $66C8    DRAW ARC RELATIVE TO GRAPHICS ORIGIN
BP_ARC_R   EQU      $66CC    DRAW ARC RELATIVE TO GRAPHICS CURSOR
SB_INIT    EQU      $67E8
BP_INIT    EQU      $67EC    ADD SUPERBASIC PROCEDURES
PROCLIST   EQU      $6864    THE SUPERBASIC PROCEDURES & FUNCTIONS LIST
BP_LET     EQU      $6C12    RETURN PARAMETER VALUES
BP_DLINE   EQU      $6DB2    REMOVE SUPERBASIC PROGRAM LINES
BP_LIST    EQU      $6DD0    LIST PART OF PROGRAM ON CHANNEL
SB_CCBTA   EQU      $6E68    CONVERT PRE-COMPILED BASIC TO ASCII
BP_MODE    EQU      $6EE0    SET RESOLUTION OF SCREEN
BP_NET     EQU      $6EFC    SET NETWORK STATION NUMBER
BP_INK     EQU      $6F18    SET CURRENT INK COLOUR
BP_STRIP   EQU      $6F1C    SET CURRENT STRIP COLOUR
BP_PAPER   EQU      $6F20    SET CURRENT PAPER COLOUR
BP_CLS     EQU      $6F3E    CLEAR PART OR ALL OF WINDOW
BP_PAN     EQU      $6F42    PAN PART OR ALL OF SCREEN
BP_SCROL   EQU      $6F46    SCROLL PART OR ALL OF SCREEN
BP_PAUSE   EQU      $6F96    DELAY EXECUTING A SUPERBASIC PROGRAM
BP_POKE    EQU      $6FBA    PLACE BYTE IN MEMORY
BP_POKEW   EQU      $6FC2    PLACE WORD IN MEMORY
BP_POKEL   EQU      $6FC8    PLACE LONG WORD IN MEMORY
BP_INPUT   EQU      $6FF4    READ CHARACTER(S) FROM A CHANNEL
BP_PRINT   EQU      $6FF6    PRINT CHARACTER(S) TO A CHANNEL
BP_RNDMZ   EQU      $72E0    RESEED RANDOM NUMBER GENERATOR
BP_RECOL   EQU      $73BA    RECOLOUR INDIVIDUL PIXELS IN WINDOW
BP_EDIT    EQU      $73E4    EDIT LIST OF SUPERBASIC LINES
BP_AUTO    EQU      $73E8    GENERATE LINE NUMBERS AUTOMATICALLY
BP_RENUM   EQU      $7412    RENUMBER SUPER BASIC PROGRAM LINES
BP_CLEAR   EQU      $7666    CLEAR SUPERBASIC VARIABLES
BP_RUN     EQU      $7672    START PROGRAM EXECUTION
BP_MERGE   EQU      $7698    LOAD & MERGE A SUPERBASIC PROGRAM
BP_MRUN    EQU      $76A2    LOAD,MERGE & RUN A SUPERBASIC PROGRAM
BP_LOAD    EQU      $76C2    LOAD A SUPERBASIC PROGRAM
BP_LRUN    EQU      $76C8    LOAD & RUN A SUPERBASIC PROGRAM
BP_NEW     EQU      $76D4    CLEAR SUPERBASIC PROGRAM & VARIABLES
BP_STOP    EQU      $76D8    TERMINATE PROGRAM EXECUTION
BP_RETRY   EQU      $7714    RE-EXECUTE SUPERBASIC STATEMENT
BP_CONTI   EQU      $771E    CONTINUE HALTED SUPERBASIC PROGRAM
BP_TURNT   EQU      $7722    TURN TURTLE TO SPECIFIED ANGLE
BP_TURN    EQU      $772A    TURN TURTLE BY SPECIFIED ANGLE
BP_PENUP   EQU      $7764    SWITCH TURTLE GRAPHICS PEN OFF
BP_PENDO   EQU      $7768    SWITCH TURTLE GRAPHICS PEN ON
BP_MOVE    EQU      $7776    MOVE TURTLE IN CURRENT DIRECTION
BP_WIDTH   EQU      $77FA    SET DEFAULT WIDTH ON DEVICE
BP_WINDO   EQU      $7810    REDEFINE CHANNEL'S WINDOW
BP_BLOCK   EQU      $781E    FILL A BLOCK WITH COLOUR 
BP_BORDE   EQU      $7836    ADD A BORDER TO A WINDOW

************************
* SUPERBASIC FUNCTIONS *
************************

BF_ACOS    EQU      $78E6    RETURN ARC COSINE
BF_ACOT    EQU      $78EC    RETURN ARC COTANGENT
BF_ASIN    EQU      $78F2    RETURN ARC SINE
BF_ATAN    EQU      $78F8    RETURN ARC TANGENT
BF_COS     EQU      $78FE    RETURN COSINE 
BF_COT     EQU      $7904    RETURN COTANGENT
BF_EXP     EQU      $790A    RETURN EXPONENTIAL
BF_LN      EQU      $7910    RETURN NATURAL LOGARITHM
BF_LOG10   EQU      $7916    RETURN LOGARITHM TO BASE 10
BF_SIN     EQU      $791C    RETURN SINE
BF_SQRT    EQU      $7922    RETURN SQUARE ROOT
BF_TAN     EQU      $7928    RETURN TANGENT
BF_DEG     EQU      $792E    RETURN ANGLE IN DEGREES
BF_RAD     EQU      $7934    RETURN ANGLE IN RADIANS
BF_ABS     EQU      $7954    RETURN ABSOLUTE VALUE OF NUMBER
BF_RND     EQU      $797C    RETURN RANDOM NUMBER WITHIN LIMITS
BF_PI      EQU      $79D2    RETURN THE VALUE 3.141593
BF_INT     EQU      $79E0    RETURN INTEGER PART OF NUMBER
BF_PEEK    EQU      $79F8    RETURN VALUE OF BYTE IN MEMORY
BF_PEEKW   EQU      $7A00    RETURN SIGNED VALUE OF WORD IN MEMORY
BF_PEEKL   EQU      $7A0A    RETURN SIGNED VALUE OF LONG WORD IN MEMORY
BF_RESPR   EQU      $7A2C    RESERVE RESIDENT PROCEDURE SPACE
BF_BEEPI   EQU      $7A42    RETURN SOUND STATUS
BF_EOF     EQU      $7A4E    RETURN FILE OR DATA STATEMENT STATUS
BF_VER     EQU      $7A74    RETURN SUPERBASIC VERSION NUMBER
BF_INKEY   EQU      $7A84    RETURN CHARACTER FROM CHANNEL
BF_CHR     EQU      $7ADA    RETURN ASCII CHARACTER
BF_FILL    EQU      $7AEC    RETURN FILLED STRING
BF_LEN     EQU      $7B3C    RETURN LENGTH OF STRING
BF_CODE    EQU      $7B52    RETURN ASCII VALUE OF CHARACTER
BF_DIMN    EQU      $7B7A    RETURN MAXIMUM SIZE OF DIMENSION
BF_DATE    EQU      $7BCA    RETURN CURRENT DATE IN SECONDS
BF_KEYRW   EQU      $7BDC    RETURN STATE OF ROW OF KEYBOARD
BF_DATES   EQU      $7C22    RETURN CURRENT DATE & TIME
BF_DAY     EQU      $7C28    RETURN CURRENT DAY OF THE WEEK

**************************
* SUPERBASIC INTERPRETER *
**************************

           EQU      $7CDC    ! OPERATOR TABLE NO 1
           EQU      $7D1A    ! LOGICAL OPERATORS
SB_SNTX    EQU      $7FB6    BASIC SYNTAX ANALYSER
SB_CMPER   EQU      $8230    ERROR WHEN COMPILING
SB_FPCBL   EQU      $8296    FORMAT PRE-COMPILED BASIC LINE
SB_FSTFC   EQU      $833C    FIRST SYNTAX TABLE FOR COMMANDS
SB_SSTFE   EQU      $84D4    SECOND SYNTAX TABLE FOR EXPRESSIONS
           EQU      $8538    ! CONSTRUCTS,TOKENS
SB_SPFBL   EQU      $8674    STORE PRE-FORMATTED LINE
SB_GQLCI   EQU      $888E    GET QDOS LIST CHANNEL ID
TEHA_TBL   EQU      $88D6    TOKEN EXPANSION HANDLER ADDRESS TABLE
SB_ELNOT   EQU      $8A24    EXPAND LINE NUMBER TOKEN
SB_ENMTE   EQU      $8A7E    EXPAND NAME TABLE ENTRY
SB_ENAMT   EQU      $8A88    EXPAND NAME TOKEN
SB_ESTRT   EQU      $8ACE    EXPAND STRING TOKEN
SB_ETXTT   EQU      $8AD8    EXPAND TEXT TOKEN
SB_ESPCT   EQU      $8AE4    EXPAND SPACE TOKEN
SB_ESEPT   EQU      $8AF4    EXPAND SEPERATOR TOKEN
SB_EOPST   EQU      $8AFA    EXPAND OPERATION SYMBOL TOKEN
SB_EKEYT   EQU      $8B00    EXPAND KEYWORD TOKEN
SB_EMONT   EQU      $8B06    EXPAND MONO-OPERATION SYMBOL TOKEN
SB_ESYMT   EQU      $8B24    EXPAND SYMBOL TOKEN
           EQU      $8B60    ! OPERATOR TABLE NO 2
           EQU      $8F9E    ! "PROC/FN CLEARED" MESSAGE
           EQU      $92E2    ! "AT LINE" MESSAGE 
FONT_1     EQU      $A1C2    DEFAULT FONT FOR CHARACTERS 32 TO 127        
FONT_2     EQU      $A52E    DEFAULT FONT FOR CHARACTERS 127 TO 191

********************************
* LOW LEVEL DEVICE CONTROLLERS *
********************************

MD_FORMT   EQU      $A77A    FORMAT A MICRODRIVE MEDIUM
MD_SENDH   EQU      $A920    SEND THE SECTOR HEADER
MD_WRITE   EQU      $A92A    WRITE A MICRODRIVE SECTOR
MD_SECTR   EQU      $A9B4    READ A MICRODRIVE SECTOR HEADER
MD_READ    EQU      $A9D4    READ A MICRODRIVE SECTOR
MD_VERIN   EQU      $A9DA    VERIFY A MICRODRIVE SECTOR
           EQU      $AABE    DECODE IPC KEYPRESS
NT_RPCKT   EQU      $ABEE    RECEIVE A NETWORK PACKET
NT_SPCKT   EQU      $AC82    SEND A NETWORK PACKET
END_OF_ROM EQU      $ADB7    END OF ROM

******************************
* START ADDRESS OF EACH PART *
******************************

PART1      EQU      $0000
PART3      EQU      $089A
PART5      EQU      $115C
PART6      EQU      $18B4
PART9      EQU      $2B8C
PART13     EQU      $4228
PART14     EQU      $4AF8
PART15     EQU      $556A
PART16     EQU      $5F3C
PART19     EQU      $6DA2
PART50     EQU      $7C56
PART51     EQU      $9694
PART99     EQU      $A77A

